/*
 * MapComposerFrame.java
 *
 * Created on July 31, 2007, 9:39 AM
 */
package edu.oregonstate.carto.mapcomposer.gui;

import edu.oregonstate.carto.mapcomposer.Map;
import edu.oregonstate.carto.utils.FileUtils;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.bind.JAXBException;

/**
 * Main window for composing a map consisting of multiple layers. The UI
 * elements mostly handled by a MapComposerPanel.
 *
 * @author Bernhard Jenny, Institute of Cartography, ETH Zurich.
 * @author Charlotte Hoarau, COGIT Laboratory, IGN France
 */
public class MapComposerFrame extends javax.swing.JFrame {

    /**
     * Creates new form MapComposerFrame
     */
    public MapComposerFrame() {
        initComponents();
        mapComposerPanel.registerUndoMenuItems(undoMenuItem, redoMenuItem);
        /*
        // FIXME temp hack for developing. Remove for final release.
        String filePath = "/Users/jennyb/Desktop/local.xml";
        if (filePath != null) {
            try {
                mapComposerPanel.setMap(Map.unmarshal(filePath));
            } catch (JAXBException | FileNotFoundException ex) {
                Logger.getLogger(MapComposerFrame.class.getName()).log(Level.SEVERE, null, ex);
                String msg = "Could not load style file";
                String title = "Error";
                ErrorDialog.showErrorDialog(msg, title, ex, rootPane);
            }
        }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        zoomAndPanPanel = new javax.swing.JPanel();
        javax.swing.JLabel zoomMapLabel = new javax.swing.JLabel();
        zoomFormattedTextField = new javax.swing.JFormattedTextField();
        javax.swing.JLabel longitudeLabel = new javax.swing.JLabel();
        longitudeFormattedTextField = new javax.swing.JFormattedTextField();
        javax.swing.JLabel latitudeLabel = new javax.swing.JLabel();
        latitudeFormattedTextField = new javax.swing.JFormattedTextField();
        mapComposerPanel = new edu.oregonstate.carto.mapcomposer.gui.MapComposerPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openStyleMenuItem = new javax.swing.JMenuItem();
        saveStyleMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveMapMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        mapMenu = new javax.swing.JMenu();
        addLayerMenuItem = new javax.swing.JMenuItem();
        removeLayerMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator4 = new javax.swing.JPopupMenu.Separator();
        removeAllLayersMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mapExtentMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        reloadMapPreviewMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator5 = new javax.swing.JPopupMenu.Separator();
        zoomAndPanMenuItem = new javax.swing.JMenuItem();
        debugMenu = new javax.swing.JMenu();
        printXMLMenuItem = new javax.swing.JMenuItem();

        zoomAndPanPanel.setLayout(new java.awt.GridBagLayout());

        zoomMapLabel.setText("Zoom");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        zoomAndPanPanel.add(zoomMapLabel, gridBagConstraints);

        zoomFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        zoomFormattedTextField.setPreferredSize(new java.awt.Dimension(140, 28));
        zoomAndPanPanel.add(zoomFormattedTextField, new java.awt.GridBagConstraints());

        longitudeLabel.setText("Longitude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        zoomAndPanPanel.add(longitudeLabel, gridBagConstraints);

        longitudeFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.#####"))));
        longitudeFormattedTextField.setPreferredSize(new java.awt.Dimension(140, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        zoomAndPanPanel.add(longitudeFormattedTextField, gridBagConstraints);

        latitudeLabel.setText("Latitude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        zoomAndPanPanel.add(latitudeLabel, gridBagConstraints);

        latitudeFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.#####"))));
        latitudeFormattedTextField.setPreferredSize(new java.awt.Dimension(140, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        zoomAndPanPanel.add(latitudeFormattedTextField, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mapComposerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        getContentPane().add(mapComposerPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openStyleMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        openStyleMenuItem.setText("Open Map Settings");
        openStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openStyleMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openStyleMenuItem);

        saveStyleMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        saveStyleMenuItem.setText("Save Map Settings");
        saveStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStyleMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveStyleMenuItem);
        fileMenu.add(jSeparator2);

        saveMapMenuItem.setText("Export Tiles");
        saveMapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMapMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMapMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        undoMenuItem.setText("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        redoMenuItem.setText("Redo");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(redoMenuItem);

        menuBar.add(editMenu);

        mapMenu.setText("Map");

        addLayerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        addLayerMenuItem.setText("Add Layer");
        addLayerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLayerMenuItemActionPerformed(evt);
            }
        });
        mapMenu.add(addLayerMenuItem);

        removeLayerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS,    java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        removeLayerMenuItem.setText("Remove Layer");
        removeLayerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLayerMenuItemActionPerformed(evt);
            }
        });
        mapMenu.add(removeLayerMenuItem);
        mapMenu.add(jSeparator4);

        removeAllLayersMenuItem.setText("Remove All Layers");
        removeAllLayersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllLayersMenuItemActionPerformed(evt);
            }
        });
        mapMenu.add(removeAllLayersMenuItem);
        mapMenu.add(jSeparator1);

        mapExtentMenuItem.setText("Set Map Extent");
        mapExtentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapExtentMenuItemActionPerformed(evt);
            }
        });
        mapMenu.add(mapExtentMenuItem);
        mapMenu.add(jSeparator3);

        reloadMapPreviewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        reloadMapPreviewMenuItem.setText("Reload Map Preview");
        reloadMapPreviewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadMapPreviewMenuItemActionPerformed(evt);
            }
        });
        mapMenu.add(reloadMapPreviewMenuItem);
        mapMenu.add(jSeparator5);

        zoomAndPanMenuItem.setText("Zoom and Pan Map");
        zoomAndPanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomAndPanMenuItemActionPerformed(evt);
            }
        });
        mapMenu.add(zoomAndPanMenuItem);

        menuBar.add(mapMenu);

        debugMenu.setText("Debug");

        printXMLMenuItem.setText("Print XML");
        printXMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printXMLMenuItemActionPerformed(evt);
            }
        });
        debugMenu.add(printXMLMenuItem);

        menuBar.add(debugMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openStyleMenuItemActionPerformed
        String filePath = FileUtils.askFile(null, "Load Style.xml file", null, true, "xml");
        if (filePath != null) {
            try {
                mapComposerPanel.setMap(Map.unmarshal(filePath));
            } catch (JAXBException | FileNotFoundException ex) {
                Logger.getLogger(MapComposerFrame.class.getName()).log(Level.SEVERE, null, ex);
                String msg = "Could not load style file";
                String title = "Error";
                ErrorDialog.showErrorDialog(msg, title, ex, rootPane);
            }
        }
    }//GEN-LAST:event_openStyleMenuItemActionPerformed

    private void saveMapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMapMenuItemActionPerformed
        try {
            String directoryPath = FileUtils.askDirectory(null, "Save Tiled Images", false, null);
            if (directoryPath == null) {
                // user canceled
                return;
            }
            mapComposerPanel.readGUIAndRenderMap();
            mapComposerPanel.renderTilesWithProgressDialog(new File(directoryPath));
        } catch (IOException ex) {
            Logger.getLogger(MapComposerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveMapMenuItemActionPerformed

    private void saveStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStyleMenuItemActionPerformed
        String filePath = FileUtils.askFile(null, "Save XML Style", null, false, "xml");
        if (filePath == null) {
            return;
        }
        File file = new File(filePath);
        try {
            mapComposerPanel.getMap().marshal(file.getAbsolutePath());
        } catch (JAXBException | FileNotFoundException ex) {
            Logger.getLogger(MapComposerFrame.class.getName()).log(Level.SEVERE, null, ex);
            String msg = "Could not save style file";
            String title = "Error";
            ErrorDialog.showErrorDialog(msg, title, ex, rootPane);
        }
    }//GEN-LAST:event_saveStyleMenuItemActionPerformed

    private void addLayerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLayerMenuItemActionPerformed
        boolean focusList = true;
        mapComposerPanel.addLayer(focusList);
    }//GEN-LAST:event_addLayerMenuItemActionPerformed

    private void removeLayerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLayerMenuItemActionPerformed
        mapComposerPanel.removeLayer();
    }//GEN-LAST:event_removeLayerMenuItemActionPerformed

    private void reloadMapPreviewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadMapPreviewMenuItemActionPerformed
        mapComposerPanel.loadHTMLMap();
    }//GEN-LAST:event_reloadMapPreviewMenuItemActionPerformed

    private void mapExtentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapExtentMenuItemActionPerformed
        mapComposerPanel.askMapExtent();
    }//GEN-LAST:event_mapExtentMenuItemActionPerformed

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        mapComposerPanel.undo();
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        mapComposerPanel.redo();
    }//GEN-LAST:event_redoMenuItemActionPerformed

    private void removeAllLayersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllLayersMenuItemActionPerformed
        mapComposerPanel.removeAllLayers();
    }//GEN-LAST:event_removeAllLayersMenuItemActionPerformed

    private void zoomAndPanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomAndPanMenuItemActionPerformed
        String title = "Zoom and Pan";
        int res = JOptionPane.showOptionDialog(mapComposerPanel, zoomAndPanPanel, title,
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
        if (res == JOptionPane.OK_OPTION) {
            int zoom = ((Number) zoomFormattedTextField.getValue()).intValue();
            double lon = ((Number) longitudeFormattedTextField.getValue()).doubleValue();
            double lat = ((Number) latitudeFormattedTextField.getValue()).doubleValue();
            mapComposerPanel.panAndZoom(zoom, lon, lat);
        }
    }//GEN-LAST:event_zoomAndPanMenuItemActionPerformed

    private void printXMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printXMLMenuItemActionPerformed
        System.out.println(mapComposerPanel.getMap().toString());
    }//GEN-LAST:event_printXMLMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addLayerMenuItem;
    private javax.swing.JMenu debugMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JFormattedTextField latitudeFormattedTextField;
    private javax.swing.JFormattedTextField longitudeFormattedTextField;
    private edu.oregonstate.carto.mapcomposer.gui.MapComposerPanel mapComposerPanel;
    private javax.swing.JMenuItem mapExtentMenuItem;
    private javax.swing.JMenu mapMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openStyleMenuItem;
    private javax.swing.JMenuItem printXMLMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JMenuItem reloadMapPreviewMenuItem;
    private javax.swing.JMenuItem removeAllLayersMenuItem;
    private javax.swing.JMenuItem removeLayerMenuItem;
    private javax.swing.JMenuItem saveMapMenuItem;
    private javax.swing.JMenuItem saveStyleMenuItem;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JMenuItem zoomAndPanMenuItem;
    private javax.swing.JPanel zoomAndPanPanel;
    private javax.swing.JFormattedTextField zoomFormattedTextField;
    // End of variables declaration//GEN-END:variables
}

/*
 * MapComposerPanel.java
 *
 * Created on July 31, 2007, 8:27 AM
 */
package edu.oregonstate.carto.mapcomposer.gui;

import edu.oregonstate.carto.mapcomposer.Layer;
import edu.oregonstate.carto.mapcomposer.Map;
import java.io.IOException;
import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import edu.oregonstate.carto.mapcomposer.Emboss;
import edu.oregonstate.carto.mapcomposer.Shadow;
import edu.oregonstate.carto.mapcomposer.Tint;
import edu.oregonstate.carto.tilemanager.TileGenerator;
import edu.oregonstate.carto.tilemanager.TileSet;
import edu.oregonstate.carto.utils.FileUtils;
import edu.oregonstate.carto.utils.GUIUtil;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.net.URISyntaxException;
import javafx.embed.swing.JFXPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class MapComposerPanel extends javax.swing.JPanel {

    /**
     * This map is the model.
     */
    private Map map = new Map();
    /**
     * updating is true while any code in this class is modifying the GUI. While
     * this flag is true, event handlers should not modify the GUI to avoid
     * recursive calls to event handlers.
     */
    private boolean updating = false;

    /**
     * Extent of the preview in lat/lon coordinates in degrees
     */
    private Rectangle2D.Double previewExtent = new Rectangle2D.Double(-180, -85.05112878, 360, 2 * 85.05112878);

    /**
     * minimum zoom level for preview
     */
    private int previewMinZoom = 0;

    /**
     * * maximum zoom level for preview
     */
    private int previewMaxZoom = 2;

    /**
     * Creates new form MapComposerPanel
     */
    public MapComposerPanel() {
        initComponents();
        writeGUI();
    }

    /**
     * Returns the MapLayer currently selected by the user.
     *
     * @return
     */
    private Layer getSelectedMapLayer() {
        int index = layerList.getSelectedIndex();
        return index == -1 ? null : map.getLayer(index);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        blendingButtonGroup = new javax.swing.ButtonGroup();
        extentPanel = new javax.swing.JPanel();
        westField = new javax.swing.JFormattedTextField();
        eastField = new javax.swing.JFormattedTextField();
        southField = new javax.swing.JFormattedTextField();
        northField = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        minZoomSpinner = new javax.swing.JSpinner();
        maxZoomSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        jFormattedTextField3 = new javax.swing.JFormattedTextField();
        layersPanel = new javax.swing.JPanel();
        javax.swing.JLabel layersLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        layerList = new edu.oregonstate.carto.mapcomposer.gui.DraggableList();
        layerListToolBar = new javax.swing.JToolBar();
        addLayerButton = new javax.swing.JButton();
        removeLayerButton = new javax.swing.JButton();
        moveUpLayerButton = new javax.swing.JButton();
        moveDownLayerButton = new javax.swing.JButton();
        centralPanel = new javax.swing.JPanel();
        javax.swing.JTabbedPane settingsTabbedPane = new javax.swing.JTabbedPane();
        javax.swing.JPanel texturePanel = new TransparentMacPanel();
        textureSelectionButton = new javax.swing.JButton();
        javax.swing.JLabel textureScaleLabel = new javax.swing.JLabel();
        textureScaleSlider = new javax.swing.JSlider();
        textureURLLabel = new javax.swing.JLabel();
        textureClearButton = new javax.swing.JButton();
        texturePreviewLabel = new javax.swing.JLabel();
        textureScaleFormattedTextField = new javax.swing.JFormattedTextField();
        javax.swing.JPanel maskPanel = new TransparentMacPanel();
        maskComboBox = new javax.swing.JComboBox();
        invertMaskCheckBox = new javax.swing.JCheckBox();
        javax.swing.JLabel maskBlurLabel = new javax.swing.JLabel();
        maskBlurSlider = new javax.swing.JSlider();
        javax.swing.JPanel dropShadowPanel = new TransparentMacPanel();
        shadowCheckBox = new javax.swing.JCheckBox();
        shadowOffsetLabel = new javax.swing.JLabel();
        shadowOffsetSlider = new javax.swing.JSlider();
        shadowColorButton = new edu.oregonstate.carto.mapcomposer.gui.ColorButton();
        javax.swing.JLabel DropShadowFuzinessLabel = new javax.swing.JLabel();
        shadowFuziSlider = new javax.swing.JSlider();
        javax.swing.JPanel embossPanel = new TransparentMacPanel();
        embossCheckBox = new javax.swing.JCheckBox();
        javax.swing.JLabel embossAzimuthLabel = new javax.swing.JLabel();
        embossAzimuthSlider = new javax.swing.JSlider();
        embossElevationSlider = new javax.swing.JSlider();
        javax.swing.JLabel embossElevationLabel = new javax.swing.JLabel();
        javax.swing.JLabel embossHeightLabel = new javax.swing.JLabel();
        embossHeightSlider = new javax.swing.JSlider();
        embossSoftnessSlider = new javax.swing.JSlider();
        javax.swing.JLabel embossSoftnessLabel = new javax.swing.JLabel();
        embossAzimuthFormattedTextField = new javax.swing.JFormattedTextField();
        embossElevationFormattedTextField = new javax.swing.JFormattedTextField();
        embossHeightFormattedTextField = new javax.swing.JFormattedTextField();
        embossSoftnessFormattedTextField = new javax.swing.JFormattedTextField();
        settingsPanel = new javax.swing.JPanel();
        visibleCheckBox = new javax.swing.JCheckBox();
        javax.swing.JLabel nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        javax.swing.JLabel urlLabel = new javax.swing.JLabel();
        javax.swing.JLabel blendingModeLabel = new javax.swing.JLabel();
        normalBlendingRadioButton = new javax.swing.JRadioButton();
        multiplyBlendingRadioButton = new javax.swing.JRadioButton();
        javax.swing.JLabel opacityLabel = new javax.swing.JLabel();
        opacitySlider = new javax.swing.JSlider();
        curveFilePathTextField = new javax.swing.JTextField();
        curveFileButton = new javax.swing.JButton();
        javax.swing.JLabel gradationCurveLabel = new javax.swing.JLabel();
        javax.swing.JLabel tintLabel = new javax.swing.JLabel();
        tintCheckBox = new javax.swing.JCheckBox();
        tintColorButton = new edu.oregonstate.carto.mapcomposer.gui.ColorButton();
        jSeparator1 = new javax.swing.JSeparator();
        urlTextField = new javax.swing.JTextField();
        opacityTextField = new javax.swing.JFormattedTextField();
        javax.swing.JTextField urlHintTextField = new javax.swing.JTextField();
        southPanel = new javax.swing.JPanel();
        extentButton = new javax.swing.JButton();
        previewButton = new javax.swing.JButton();
        eastPanel = new javax.swing.JPanel();

        extentPanel.setLayout(new java.awt.GridBagLayout());

        westField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.#####"))));
        westField.setPreferredSize(new java.awt.Dimension(65, 28));
        westField.setValue(new Double(-180));
        javax.swing.text.NumberFormatter nfWest = new javax.swing.text.NumberFormatter();
        nfWest.setMinimum(-180.0);
        nfWest.setMaximum(180.0);
        westField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfWest));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        extentPanel.add(westField, gridBagConstraints);

        eastField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.#####"))));
        eastField.setPreferredSize(new java.awt.Dimension(65, 28));
        eastField.setValue(new Double(180));
        javax.swing.text.NumberFormatter nfEast = new javax.swing.text.NumberFormatter();
        nfEast.setMinimum(-180.0);
        nfEast.setMaximum(180.0);
        eastField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfEast));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        extentPanel.add(eastField, gridBagConstraints);

        southField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.#####"))));
        southField.setPreferredSize(new java.awt.Dimension(65, 28));
        southField.setValue(new Double(-90));
        javax.swing.text.NumberFormatter nfSouth = new javax.swing.text.NumberFormatter();
        nfSouth.setMinimum(-85.05113);
        nfSouth.setMaximum(85.05113);
        southField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfSouth));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        extentPanel.add(southField, gridBagConstraints);

        northField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.#####"))));
        northField.setPreferredSize(new java.awt.Dimension(65, 28));
        northField.setValue(new Double(90));
        javax.swing.text.NumberFormatter nfNorth = new javax.swing.text.NumberFormatter();
        nfNorth.setMinimum(-85.05113);
        nfNorth.setMaximum(85.05113);
        northField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfNorth));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        extentPanel.add(northField, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        extentPanel.add(jPanel1, gridBagConstraints);

        minZoomSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 15, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        extentPanel.add(minZoomSpinner, gridBagConstraints);

        maxZoomSpinner.setModel(new javax.swing.SpinnerNumberModel(4, 0, 15, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        extentPanel.add(maxZoomSpinner, gridBagConstraints);

        jLabel1.setText("West");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        extentPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("East");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        extentPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("North");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        extentPanel.add(jLabel3, gridBagConstraints);

        jLabel4.setText("South");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        extentPanel.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Minimum Zoom");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        extentPanel.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Maximimum Zoom");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        extentPanel.add(jLabel6, gridBagConstraints);

        jFormattedTextField3.setText("jFormattedTextField3");

        setLayout(new java.awt.BorderLayout());

        layersPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        layersPanel.setLayout(new java.awt.BorderLayout());

        layersLabel.setText("Layers");
        layersLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 10, 1));
        layersPanel.add(layersLabel, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 132));

        layerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        layerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                layerListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(layerList);

        layersPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        layerListToolBar.setFloatable(false);

        addLayerButton.setText("+");
        addLayerButton.setMaximumSize(new java.awt.Dimension(22, 22));
        addLayerButton.setMinimumSize(new java.awt.Dimension(22, 22));
        addLayerButton.setPreferredSize(new java.awt.Dimension(22, 22));
        addLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLayerButtonActionPerformed(evt);
            }
        });
        layerListToolBar.add(addLayerButton);

        removeLayerButton.setText("-");
        removeLayerButton.setMaximumSize(new java.awt.Dimension(22, 22));
        removeLayerButton.setMinimumSize(new java.awt.Dimension(22, 22));
        removeLayerButton.setPreferredSize(new java.awt.Dimension(22, 22));
        removeLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLayerButtonActionPerformed(evt);
            }
        });
        layerListToolBar.add(removeLayerButton);

        moveUpLayerButton.setText("Up");
        moveUpLayerButton.setMaximumSize(new java.awt.Dimension(45, 22));
        moveUpLayerButton.setMinimumSize(new java.awt.Dimension(45, 22));
        moveUpLayerButton.setPreferredSize(new java.awt.Dimension(45, 22));
        moveUpLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpLayerButtonActionPerformed(evt);
            }
        });
        layerListToolBar.add(moveUpLayerButton);

        moveDownLayerButton.setText("Down");
        moveDownLayerButton.setMaximumSize(new java.awt.Dimension(45, 22));
        moveDownLayerButton.setMinimumSize(new java.awt.Dimension(45, 22));
        moveDownLayerButton.setPreferredSize(new java.awt.Dimension(45, 22));
        moveDownLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownLayerButtonActionPerformed(evt);
            }
        });
        layerListToolBar.add(moveDownLayerButton);

        layersPanel.add(layerListToolBar, java.awt.BorderLayout.PAGE_END);

        add(layersPanel, java.awt.BorderLayout.WEST);

        centralPanel.setLayout(new java.awt.GridBagLayout());

        texturePanel.setLayout(new java.awt.GridBagLayout());

        textureSelectionButton.setText("Select");
        textureSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textureSelectionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        texturePanel.add(textureSelectionButton, gridBagConstraints);

        textureScaleLabel.setText("Texture Scale:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        texturePanel.add(textureScaleLabel, gridBagConstraints);

        textureScaleSlider.setMajorTickSpacing(50);
        textureScaleSlider.setMinimum(-100);
        textureScaleSlider.setMinorTickSpacing(10);
        textureScaleSlider.setPaintTicks(true);
        textureScaleSlider.setValue(0);
        textureScaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        texturePanel.add(textureScaleSlider, gridBagConstraints);

        textureURLLabel.setFont(textureURLLabel.getFont().deriveFont(textureURLLabel.getFont().getSize()-3f));
        textureURLLabel.setText("Texture Path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        texturePanel.add(textureURLLabel, gridBagConstraints);

        textureClearButton.setText("Clear");
        textureClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textureClearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        texturePanel.add(textureClearButton, gridBagConstraints);

        texturePreviewLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        texturePreviewLabel.setPreferredSize(new java.awt.Dimension(50, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        texturePanel.add(texturePreviewLabel, gridBagConstraints);

        textureScaleFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.#"))));
        textureScaleFormattedTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numberFieldChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        texturePanel.add(textureScaleFormattedTextField, gridBagConstraints);

        settingsTabbedPane.addTab("Texture", texturePanel);

        maskPanel.setLayout(new java.awt.GridBagLayout());

        maskComboBox.setEditable(true);
        maskComboBox.setMaximumRowCount(25);
        maskComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        maskComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        maskPanel.add(maskComboBox, gridBagConstraints);

        invertMaskCheckBox.setText("Invert Mask");
        invertMaskCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        invertMaskCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        invertMaskCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        maskPanel.add(invertMaskCheckBox, gridBagConstraints);

        maskBlurLabel.setText("Blur Mask:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        maskPanel.add(maskBlurLabel, gridBagConstraints);

        maskBlurSlider.setMinorTickSpacing(10);
        maskBlurSlider.setPaintTicks(true);
        maskBlurSlider.setValue(0);
        maskBlurSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        maskPanel.add(maskBlurSlider, gridBagConstraints);

        settingsTabbedPane.addTab("Mask", maskPanel);

        dropShadowPanel.setLayout(new java.awt.GridBagLayout());

        shadowCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        shadowCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        shadowCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        dropShadowPanel.add(shadowCheckBox, new java.awt.GridBagConstraints());

        shadowOffsetLabel.setText("Offset:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        dropShadowPanel.add(shadowOffsetLabel, gridBagConstraints);

        shadowOffsetSlider.setMaximum(20);
        shadowOffsetSlider.setValue(1);
        shadowOffsetSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        dropShadowPanel.add(shadowOffsetSlider, new java.awt.GridBagConstraints());

        shadowColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        dropShadowPanel.add(shadowColorButton, new java.awt.GridBagConstraints());

        DropShadowFuzinessLabel.setText("Fuziness:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        dropShadowPanel.add(DropShadowFuzinessLabel, gridBagConstraints);

        shadowFuziSlider.setMaximum(20);
        shadowFuziSlider.setValue(10);
        shadowFuziSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        dropShadowPanel.add(shadowFuziSlider, gridBagConstraints);

        settingsTabbedPane.addTab("Drop Shadow", dropShadowPanel);

        embossPanel.setLayout(new java.awt.GridBagLayout());

        embossCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        embossCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        embossCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                embossCheckBoxStateChanged(evt);
            }
        });
        embossCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        embossPanel.add(embossCheckBox, new java.awt.GridBagConstraints());

        embossAzimuthLabel.setText("Azimuth:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        embossPanel.add(embossAzimuthLabel, gridBagConstraints);

        embossAzimuthSlider.setMaximum(360);
        embossAzimuthSlider.setValue(315);
        embossAzimuthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        embossPanel.add(embossAzimuthSlider, gridBagConstraints);

        embossElevationSlider.setMaximum(90);
        embossElevationSlider.setValue(45);
        embossElevationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        embossPanel.add(embossElevationSlider, gridBagConstraints);

        embossElevationLabel.setText("Elevation:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        embossPanel.add(embossElevationLabel, gridBagConstraints);

        embossHeightLabel.setText("Height:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        embossPanel.add(embossHeightLabel, gridBagConstraints);

        embossHeightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        embossPanel.add(embossHeightSlider, gridBagConstraints);

        embossSoftnessSlider.setMaximum(50);
        embossSoftnessSlider.setValue(10);
        embossSoftnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        embossPanel.add(embossSoftnessSlider, gridBagConstraints);

        embossSoftnessLabel.setText("Softness:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        embossPanel.add(embossSoftnessLabel, gridBagConstraints);

        javax.swing.text.NumberFormatter nfEmbossAziuth = new javax.swing.text.NumberFormatter();
        nfEmbossAziuth.setMinimum(0);
        nfEmbossAziuth.setMaximum(360);
        embossAzimuthFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfEmbossAziuth));
        embossAzimuthFormattedTextField.setText("0");
        embossAzimuthFormattedTextField.setPreferredSize(new java.awt.Dimension(60, 28));
        embossAzimuthFormattedTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numberFieldChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        embossPanel.add(embossAzimuthFormattedTextField, gridBagConstraints);

        embossElevationFormattedTextField.setText("0");
        javax.swing.text.NumberFormatter nfEmbossElevation = new javax.swing.text.NumberFormatter();
        nfEmbossElevation.setMinimum(0);
        nfEmbossElevation.setMaximum(90);
        embossElevationFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfEmbossElevation));
        embossElevationFormattedTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numberFieldChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        embossPanel.add(embossElevationFormattedTextField, gridBagConstraints);

        embossHeightFormattedTextField.setText("0");
        javax.swing.text.NumberFormatter nfEmbossHeight = new javax.swing.text.NumberFormatter();
        nfEmbossHeight.setMinimum(0);
        nfEmbossHeight.setMaximum(100);
        embossHeightFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfEmbossHeight));
        embossHeightFormattedTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numberFieldChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        embossPanel.add(embossHeightFormattedTextField, gridBagConstraints);

        embossSoftnessFormattedTextField.setText("0");
        javax.swing.text.NumberFormatter nfEmbossSoftness = new javax.swing.text.NumberFormatter();
        nfEmbossSoftness.setMinimum(0);
        nfEmbossSoftness.setMaximum(50);
        embossSoftnessFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nfEmbossSoftness));
        embossSoftnessFormattedTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numberFieldChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        embossPanel.add(embossSoftnessFormattedTextField, gridBagConstraints);

        settingsTabbedPane.addTab("Emboss", embossPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        centralPanel.add(settingsTabbedPane, gridBagConstraints);

        settingsPanel.setLayout(new java.awt.GridBagLayout());

        visibleCheckBox.setText("Visible");
        visibleCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        visibleCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        visibleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(visibleCheckBox, gridBagConstraints);

        nameLabel.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        settingsPanel.add(nameLabel, gridBagConstraints);

        nameTextField.setText("Forest");
        // Listen for changes in the text
        addDocumentListener(nameTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(nameTextField, gridBagConstraints);

        urlLabel.setText("URL:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        settingsPanel.add(urlLabel, gridBagConstraints);

        blendingModeLabel.setText("Blending Mode:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        settingsPanel.add(blendingModeLabel, gridBagConstraints);

        blendingButtonGroup.add(normalBlendingRadioButton);
        normalBlendingRadioButton.setText("Normal");
        normalBlendingRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        normalBlendingRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        normalBlendingRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(normalBlendingRadioButton, gridBagConstraints);

        blendingButtonGroup.add(multiplyBlendingRadioButton);
        multiplyBlendingRadioButton.setText("Multiply");
        multiplyBlendingRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        multiplyBlendingRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        multiplyBlendingRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(multiplyBlendingRadioButton, gridBagConstraints);

        opacityLabel.setText("Opacity:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        settingsPanel.add(opacityLabel, gridBagConstraints);

        opacitySlider.setValue(100);
        opacitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(opacitySlider, gridBagConstraints);

        curveFilePathTextField.setEditable(false);
        curveFilePathTextField.setBackground(null);
        curveFilePathTextField.setFont(curveFilePathTextField.getFont().deriveFont((float)10));
        curveFilePathTextField.setText("file:///Volumes/FireWireHD/Java/MapComposer/data/forestcurve.acv");
        curveFilePathTextField.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        settingsPanel.add(curveFilePathTextField, gridBagConstraints);

        curveFileButton.setText("File");
        curveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curveFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        settingsPanel.add(curveFileButton, gridBagConstraints);

        gradationCurveLabel.setText("Curve (ACV):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        settingsPanel.add(gradationCurveLabel, gridBagConstraints);

        tintLabel.setText("Tint:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        settingsPanel.add(tintLabel, gridBagConstraints);

        tintCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        tintCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        tintCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(tintCheckBox, gridBagConstraints);

        tintColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapComposerPanel.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(tintColorButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        settingsPanel.add(jSeparator1, gridBagConstraints);

        urlTextField.setText("http://tile.stamen.com/watercolor/{z}/{x}/{y}.png");
        urlTextField.setPreferredSize(new java.awt.Dimension(600, 28));
        // Listen for changes in the text
        addDocumentListener(urlTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(urlTextField, gridBagConstraints);

        opacityTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
        opacityTextField.setPreferredSize(new java.awt.Dimension(60, 28));
        javax.swing.text.NumberFormatter nf = new javax.swing.text.NumberFormatter();
        nf.setMinimum(0);
        nf.setMaximum(100);
        opacityTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(nf));
        opacityTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numberFieldChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(opacityTextField, gridBagConstraints);

        urlHintTextField.setEditable(false);
        urlHintTextField.setBackground(null);
        urlHintTextField.setFont(urlHintTextField.getFont().deriveFont((float)10));
        urlHintTextField.setText("Example: http://tile.openstreetmap.org/{z}/{x}/{y}.png or http://tile.stamen.com/watercolor/{z}/{x}/{y}.png");
        urlHintTextField.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(urlHintTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 20, 10);
        centralPanel.add(settingsPanel, gridBagConstraints);

        add(centralPanel, java.awt.BorderLayout.CENTER);

        southPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        extentButton.setText("Extent");
        extentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extentButtonActionPerformed(evt);
            }
        });
        southPanel.add(extentButton);

        previewButton.setText("Preview");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });
        southPanel.add(previewButton);

        add(southPanel, java.awt.BorderLayout.SOUTH);

        final JFXPanel fxPanel = new JFXPanel();
        eastPanel.add(fxPanel);
        add(eastPanel, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Add a listener for changes to text fields. The listener calls readGUI()
     * whenever the text changes.
     *
     * @param textField
     */
    private void addDocumentListener(JTextField textField) {
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                // text was changed
                readGUI();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                // text was deleted
                readGUI();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                // text was inserted
                readGUI();
            }
        });
    }

    /**
     * Event handler for moving a layer downwards in the layers hierarchy.
     *
     * @param evt
     */
    private void moveDownLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownLayerButtonActionPerformed
        int selectedLayerID = layerList.getSelectedIndex();
        if (selectedLayerID < 0 || selectedLayerID >= map.getLayerCount() - 1) {
            return;
        }
        Layer layer = map.removeLayer(selectedLayerID);
        map.addLayer(++selectedLayerID, layer);
        layerList.setSelectedIndex(selectedLayerID);
        writeGUI();
    }//GEN-LAST:event_moveDownLayerButtonActionPerformed

    /**
     * Event handler for moving a layer upwards in the layers hierarchy.
     *
     * @param evt
     */
    private void moveUpLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpLayerButtonActionPerformed
        int selectedLayerID = layerList.getSelectedIndex();
        if (selectedLayerID <= 0) {
            return;
        }
        Layer layer = map.removeLayer(selectedLayerID);
        map.addLayer(--selectedLayerID, layer);
        this.layerList.setSelectedIndex(selectedLayerID);
        this.writeGUI();
    }//GEN-LAST:event_moveUpLayerButtonActionPerformed

    /**
     * Event handler for removing a layer.
     */
    private void removeLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLayerButtonActionPerformed
        int selectedLayerID = this.layerList.getSelectedIndex();
        if (selectedLayerID < 0) {
            return;
        }
        this.map.removeLayer(selectedLayerID);
        this.writeGUI();
        this.layerList.setSelectedIndex(--selectedLayerID);
    }//GEN-LAST:event_removeLayerButtonActionPerformed

    private URL generateHTMLMapViewer(File directory, 
            int zoom, double centerLat, double centerLon) 
            throws IOException, URISyntaxException {
        if (directory == null) {
            throw new IllegalStateException("no directory for HTML map");
        }
        String path = directory.getAbsolutePath();
        URL inputUrl = getClass().getResource("/index_with_variables.html");
        File dest = new File(path + File.separator + "index.html");
        String html = org.apache.commons.io.FileUtils.readFileToString(new File(inputUrl.toURI()));
        html = html.replace("$$viewZoomlevel$$", Integer.toString(zoom));
        html = html.replace("$$viewCenterLatitude$$", Double.toString(centerLat));
        html = html.replace("$$viewCenterLongitude$$", Double.toString(centerLon));
        org.apache.commons.io.FileUtils.writeStringToFile(dest, html);
        return dest.toURI().toURL();
    }
    
    /**
     * Event handler to generate a preview of the current map. Either displays
     * an image in a new window, or creates tiles and has the default web
     * browser render them.
     *
     * @param evt
     */
    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        try {
            readGUI();
            
            // create tiles
            TileGenerator tileGenerator = new TileGenerator();
            tileGenerator.setExtent(previewExtent.getMinX(),
                    previewExtent.getMaxX(),
                    previewExtent.getMinY(),
                    previewExtent.getMaxY());
            tileGenerator.setZoomRange(previewMinZoom, previewMaxZoom);
            tileGenerator.generateTiles(map);
            
            // copy html file to directory with tiles and open in web browser
            URL htmlMapViewerURL = generateHTMLMapViewer(
                    tileGenerator.getDirectory(), 
                    previewMinZoom, 
                    previewExtent.getCenterY(), previewExtent.getCenterX());
            Desktop.getDesktop().browse(htmlMapViewerURL.toURI());
        } catch (IOException | URISyntaxException exc) {
            // FIXME
            ErrorDialog.showErrorDialog("Could not render the preview", exc);
            exc.printStackTrace();
        }
    }//GEN-LAST:event_previewButtonActionPerformed

    /**
     * A general event handler for when a slider value changes. Used by various
     * sliders.
     *
     * @param evt
     */
    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        if (this.updating) {
            return;
        }

        this.updating = true;
        try {
            this.opacityTextField.setValue(opacitySlider.getValue());
            this.textureScaleFormattedTextField.setValue(readTextureScale());
            this.embossAzimuthFormattedTextField.setValue(embossAzimuthSlider.getValue());
            this.embossElevationFormattedTextField.setValue(embossElevationSlider.getValue());
            this.embossHeightFormattedTextField.setValue(embossHeightSlider.getValue());
            this.embossSoftnessFormattedTextField.setValue(embossSoftnessSlider.getValue());
        } finally {
            this.updating = false;
        }

        if (((JSlider) evt.getSource()).getValueIsAdjusting() == false) {
            this.readGUI();
        }
    }//GEN-LAST:event_sliderStateChanged

    /**
     * A generic event handler for different kinds of action events. Used by
     * various components.
     *
     * @param evt
     */
    private void actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformed
        this.readGUI();
    }//GEN-LAST:event_actionPerformed

    /**
     * Event handler called when the selection in the layers list changes.
     *
     * @param evt
     */
    private void layerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_layerListValueChanged
        this.writeGUI();
    }//GEN-LAST:event_layerListValueChanged

    /**
     * Add a layer.
     *
     * @param evt
     */
    private void addLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLayerButtonActionPerformed
        String name = JOptionPane.showInputDialog(this, "Layer Name", "Layer");
        if (name == null) {
            return;
        }

        int selectedLayerID = this.layerList.getSelectedIndex();
        this.map.addLayer(++selectedLayerID, new Layer(name));
        this.writeGUI();
        this.layerList.setSelectedIndex(selectedLayerID);
    }//GEN-LAST:event_addLayerButtonActionPerformed

    private void embossCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_embossCheckBoxStateChanged
        if (updating) {
            return;
        }
        if (this.embossCheckBox.isSelected()) {
            this.embossHeightSlider.setEnabled(true);
            this.embossHeightFormattedTextField.setEnabled(true);
            this.embossSoftnessSlider.setEnabled(true);
            this.embossSoftnessFormattedTextField.setEnabled(true);
            this.embossAzimuthSlider.setEnabled(true);
            this.embossAzimuthFormattedTextField.setEnabled(true);
            this.embossElevationSlider.setEnabled(true);
            this.embossElevationFormattedTextField.setEnabled(true);
        } else {
            this.embossHeightSlider.setEnabled(false);
            this.embossHeightFormattedTextField.setEnabled(false);
            this.embossSoftnessSlider.setEnabled(false);
            this.embossSoftnessFormattedTextField.setEnabled(false);
            this.embossAzimuthSlider.setEnabled(false);
            this.embossAzimuthFormattedTextField.setEnabled(false);
            this.embossElevationSlider.setEnabled(false);
            this.embossElevationFormattedTextField.setEnabled(false);
        }
    }//GEN-LAST:event_embossCheckBoxStateChanged

    /**
     * Event handler to add a texture image file or a texture tile set to the
     * selected layer.
     *
     * @param evt
     */
    private void textureSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textureSelectionButtonActionPerformed
        /*try {
         String path = null;
         if (imageCollection instanceof DirectoryImageCollection) {
         String msg = "Select a Texture Image Tile";
         path = FileUtils.askFile(GUIUtil.getOwnerFrame(this), msg, true);
         } else if (imageCollection instanceof TiledImageCollection) {
         String msg = "Select a Directory with a Texture Tile Set";
         path = FileUtils.askDirectory(GUIUtil.getOwnerFrame(this), msg, true, null);
         }
         if (path != null) {
         MapLayer layer = getSelectedMapLayer();
         if (layer != null) {
         layer.setTextureURL(path);
         }
         writeGUI();
         }
         } catch (Exception ex) {
         String msg = "Error";
         String title = "The texture could not be loaded.";
         ErrorDialog.showErrorDialog(msg, title, ex, this);
         }
         */
    }//GEN-LAST:event_textureSelectionButtonActionPerformed

    /**
     * Event handler to remove the current texture from the selected layer.
     *
     * @param evt
     */
    private void textureClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textureClearButtonActionPerformed
        Layer layer = getSelectedMapLayer();
        if (layer != null) {
            layer.setTextureURL(null);
        }
        writeGUI();
    }//GEN-LAST:event_textureClearButtonActionPerformed

    private void numberFieldChanged(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_numberFieldChanged
        if (this.updating || "value".equals(evt.getPropertyName()) == false) {
            return;
        }

        this.updating = true;
        try {
            int opacity = ((Number) opacityTextField.getValue()).intValue();
            this.opacitySlider.setValue(opacity);

            float textureScale = ((Number) textureScaleFormattedTextField.getValue()).floatValue();
            this.writeTextureScale(textureScale);

            int embossAzimuth = ((Number) embossAzimuthFormattedTextField.getValue()).intValue();
            int embossElevation = ((Number) embossElevationFormattedTextField.getValue()).intValue();
            int embossHeight = ((Number) embossHeightFormattedTextField.getValue()).intValue();
            int embossSoftness = ((Number) embossSoftnessFormattedTextField.getValue()).intValue();
            this.embossAzimuthSlider.setValue(embossAzimuth);
            this.embossElevationSlider.setValue(embossElevation);
            this.embossHeightSlider.setValue(embossHeight);
            this.embossSoftnessSlider.setValue(embossSoftness);

        } finally {
            this.updating = false;
        }
    }//GEN-LAST:event_numberFieldChanged

    /**
     * Event handler for selecting a Photoshop ACV curve file.
     *
     * @param evt
     */
    private void curveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curveFileButtonActionPerformed
        String msg = "Select an Adobe Photoshop ACV File";
        String filePath = FileUtils.askFile(GUIUtil.getOwnerFrame(this), msg, true);
        if (filePath == null) {
            return;
        }
        this.curveFilePathTextField.setText("file://" + filePath);
        this.readGUI();
    }//GEN-LAST:event_curveFileButtonActionPerformed

    private void extentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extentButtonActionPerformed
        String title = "Tiles Extent";
        
        // write current values to dialog
        westField.setValue(previewExtent.getMinX());
        southField.setValue(previewExtent.getMinY());
        eastField.setValue(previewExtent.getMaxX());
        northField.setValue(previewExtent.getMaxY());
        minZoomSpinner.setValue(previewMinZoom);
        maxZoomSpinner.setValue(previewMaxZoom);
        
        // show modal dialog
        int res = JOptionPane.showOptionDialog(this, extentPanel, title, 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
        
        // read new values from dialog
        if (res == JOptionPane.OK_OPTION) {
            double west = ((Number) westField.getValue()).doubleValue();
            double east = ((Number) eastField.getValue()).doubleValue();
            double south = ((Number) southField.getValue()).doubleValue();
            double north = ((Number) northField.getValue()).doubleValue();
            this.previewExtent = new Rectangle2D.Double(west, south, east - west, north - south);
            this.previewMinZoom = ((Number) minZoomSpinner.getValue()).intValue();
            this.previewMaxZoom = ((Number) maxZoomSpinner.getValue()).intValue();
        }
    }//GEN-LAST:event_extentButtonActionPerformed

    /**
     * Updates the value of the texture scale slider
     *
     * @param textureScale
     */
    private void writeTextureScale(float textureScale) {
        if (textureScale > 1) {
            textureScale = -100f + textureScale * 100f;
        } else {
            textureScale = -200 + textureScale * 200f;
        }
        this.textureScaleSlider.setValue((int) (textureScale));
    }

    /**
     * Reads the value of the texture scale slider.
     *
     * @return
     */
    private float readTextureScale() {
        // scale from [-100, +100] to [0.5, 2]
        float textureScale = this.textureScaleSlider.getValue();
        if (textureScale > 0) {
            textureScale = 1f + textureScale / 100f;
        } else {
            textureScale = 1f + textureScale * 0.5f / 100f;
        }
        return textureScale;
    }

    /**
     * Writes settings of the currently selected layer to the GUI.
     */
    final void writeGUI() {
        if (this.updating) {
            return;
        }

        try {
            this.updating = true;

            // update the layers list
            int selectedID = layerList.getSelectedIndex();
            layerList.setListData(map.getLayers());
            layerList.setSelectedIndex(selectedID);

            Layer selectedLayer = getSelectedMapLayer();

            // enable or disable user interface elements depending on whether
            // a layer is currently selected
            final boolean on = selectedLayer != null;
            this.visibleCheckBox.setEnabled(on);
            this.nameTextField.setEnabled(on);
            this.urlTextField.setEnabled(on);
            this.normalBlendingRadioButton.setEnabled(on);
            this.multiplyBlendingRadioButton.setEnabled(on);
            this.opacitySlider.setEnabled(on);
            this.opacityTextField.setEnabled(on);
            this.curveFilePathTextField.setEnabled(on);
            this.curveFileButton.setEnabled(on);
            this.tintCheckBox.setEnabled(on);
            this.tintColorButton.setEnabled(on);
            this.textureSelectionButton.setEnabled(on);
            this.textureClearButton.setEnabled(on);
            this.textureURLLabel.setEnabled(on);
            this.textureScaleSlider.setEnabled(on);
            this.maskComboBox.setEnabled(on);
            this.maskBlurSlider.setEnabled(on);
            this.invertMaskCheckBox.setEnabled(on);
            this.shadowCheckBox.setEnabled(on);
            this.shadowOffsetSlider.setEnabled(on);
            this.shadowColorButton.setEnabled(on);
            this.shadowFuziSlider.setEnabled(on);
            this.embossCheckBox.setEnabled(on);
            this.embossHeightSlider.setEnabled(on);
            this.embossHeightFormattedTextField.setEnabled(on);
            this.embossSoftnessSlider.setEnabled(on);
            this.embossSoftnessFormattedTextField.setEnabled(on);
            this.embossAzimuthSlider.setEnabled(on);
            this.embossAzimuthFormattedTextField.setEnabled(on);
            this.embossElevationSlider.setEnabled(on);
            this.embossElevationFormattedTextField.setEnabled(on);
            this.previewButton.setEnabled(on);
            this.removeLayerButton.setEnabled(on);
            this.moveUpLayerButton.setEnabled(on && selectedID != 0);
            this.moveDownLayerButton.setEnabled(on && selectedID != map.getLayerCount() - 1);

            if (selectedLayer == null) {
                this.nameTextField.setText(null);
                this.urlTextField.setText(null);
                this.curveFilePathTextField.setText(null);
                this.maskComboBox.setSelectedItem(null);
                return;
            }

            this.visibleCheckBox.setSelected(selectedLayer.isVisible());
            this.nameTextField.setText(selectedLayer.getName());
            TileSet tileSet = selectedLayer.getImageTileSet();
            if (tileSet == null) {
                this.urlTextField.setText(null);
            } else {
                this.urlTextField.setText(tileSet.getUrlTemplate());
            }

            // blending
            this.normalBlendingRadioButton.setSelected(selectedLayer.isBlendingNormal());

            // opacity
            this.opacitySlider.setValue((int) (selectedLayer.getOpacity() * 100));
            this.opacityTextField.setValue((int) (selectedLayer.getOpacity() * 100));

            // curve
            this.curveFilePathTextField.setText(selectedLayer.getCurveURL());

            // tinting
            if (selectedLayer.getTint() != null) {
                this.tintCheckBox.setSelected(true);
                this.tintColorButton.setColor(selectedLayer.getTint().getTintColor());
            } else {
                this.tintCheckBox.setSelected(false);
            }

            // texture
            textureURLLabel.setText(selectedLayer.getTextureURL());
            this.writeTextureScale(selectedLayer.getTextureScale());
            this.textureScaleFormattedTextField.setValue(selectedLayer.getTextureScale());
            previewTexture();

            // mask
            // FIXME this.maskComboBox.setSelectedItem(selectedLayer.getMaskName());
            this.invertMaskCheckBox.setSelected(selectedLayer.isInvertMask());
            this.maskBlurSlider.setValue((int) (selectedLayer.getMaskBlur() * 10f));

            // drop shadow
            if (selectedLayer.getShadow() != null) {
                this.shadowCheckBox.setSelected(true);
                this.shadowOffsetSlider.setValue(selectedLayer.getShadow().getShadowOffset());
                this.shadowFuziSlider.setValue(selectedLayer.getShadow().getShadowFuziness());
                this.shadowColorButton.setColor(selectedLayer.getShadow().getShadowColor());
            } else {
                this.shadowCheckBox.setSelected(false);
            }

            // embossing
            if (selectedLayer.getEmboss() != null) {
                this.embossCheckBox.setSelected(true);
                this.embossHeightSlider.setEnabled(true);
                this.embossSoftnessSlider.setEnabled(true);
                this.embossAzimuthSlider.setEnabled(true);
                this.embossElevationSlider.setEnabled(true);

                this.embossHeightSlider.setValue((int) (selectedLayer.getEmboss().getEmbossHeight() * 100f));
                this.embossHeightFormattedTextField.setValue(selectedLayer.getEmboss().getEmbossHeight() * 100);
                this.embossSoftnessSlider.setValue((int) selectedLayer.getEmboss().getEmbossSoftness());
                this.embossSoftnessFormattedTextField.setValue(selectedLayer.getEmboss().getEmbossSoftness());
                this.embossAzimuthSlider.setValue((int) selectedLayer.getEmboss().getEmbossAzimuth());
                this.embossAzimuthFormattedTextField.setValue(selectedLayer.getEmboss().getEmbossAzimuth());
                this.embossElevationSlider.setValue((int) selectedLayer.getEmboss().getEmbossElevation());
                this.embossElevationFormattedTextField.setValue(selectedLayer.getEmboss().getEmbossElevation());
            } else {
                this.embossCheckBox.setSelected(false);
            }
        } finally {
            this.updating = false;
        }
    }

    /**
     * Displays a piece of texture in a preview thumbnail.
     */
    private void previewTexture() {
        /*
         // tiled textures are not currently supported
         if (imageCollection instanceof DirectoryImageCollection == false) {
         texturePreviewLabel.setIcon(null);
         return;
         }
         String textureURL = getSelectedMapLayer().getTextureURL();
         if (textureURL == null) {
         texturePreviewLabel.setIcon(null);
         return;
         }
         try {
         int h = texturePreviewLabel.getHeight();
         int w = texturePreviewLabel.getWidth();
         BufferedImage texturePatch = ImageIO.read(new File(textureURL));
         TileImageFilter tiler = new TileImageFilter(w, h);
         BufferedImage img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
         img = tiler.filter(texturePatch, img);
         texturePreviewLabel.setIcon(new ImageIcon(img));
         } catch (Exception ex) {
         texturePreviewLabel.setIcon(null);
         }
         */
    }

    /**
     * Reads user settings from the GUI and passes the settings to the currently
     * selected layer.
     */
    public void readGUI() {
        if (this.updating) {
            return;
        }
        Layer layer = getSelectedMapLayer();
        if (layer == null) {
            return;
        }

        layer.setVisible(visibleCheckBox.isSelected());
        layer.setName(nameTextField.getText());
        layer.setBlending(this.normalBlendingRadioButton.isSelected()
                ? Layer.BlendType.NORMAL : Layer.BlendType.MULTIPLY);
        layer.setOpacity(this.opacitySlider.getValue() / 100.f);
        layer.setCurveURL(this.curveFilePathTextField.getText());

        TileSet tileSet = layer.getImageTileSet();
        if (tileSet == null) {
            tileSet = new TileSet(urlTextField.getText());
            layer.setImageTileSet(tileSet);
        } else {
            tileSet.setUrlTemplate(urlTextField.getText());
        }
        Color okColor = UIManager.getDefaults().getColor("TextField.foreground");
        urlTextField.setForeground(tileSet.isURLTemplateValid() ? okColor : Color.RED);
        
        // mask
        // FIXME layer.setMaskName((String) this.maskComboBox.getSelectedItem());
        layer.setInvertMask(this.invertMaskCheckBox.isSelected());
        layer.setMaskBlur(this.maskBlurSlider.getValue() / 10f);

        // tint
        if (this.tintCheckBox.isSelected()) {
            Tint tint = new Tint();
            tint.setTintColor(this.tintColorButton.getColor());
            layer.setTint(tint);
        } else {
            layer.setTint(null);
        }

        // texture
        layer.setTextureScale(this.readTextureScale());

        // shadow
        if (this.shadowCheckBox.isSelected()) {
            Shadow shadow = new Shadow();
            shadow.setShadowOffset(this.shadowOffsetSlider.getValue());
            shadow.setShadowColor(this.shadowColorButton.getColor());
            shadow.setShadowFuziness(this.shadowFuziSlider.getValue());
            layer.setShadow(shadow);
        } else {
            layer.setShadow(null);
        }

        // emboss
        if (this.embossCheckBox.isSelected()) {
            Emboss emboss = new Emboss();
            emboss.setEmbossHeight(this.embossHeightSlider.getValue() / 100f);
            emboss.setEmbossSoftness(this.embossSoftnessSlider.getValue());
            emboss.setEmbossAzimuth(this.embossAzimuthSlider.getValue());
            emboss.setEmbossElevation(this.embossElevationSlider.getValue());
            layer.setEmboss(emboss);
        } else {
            layer.setEmboss(null);
        }
    }

    public Map getMap() {
        return map;
    }

    public void setMap(Map map) {
        this.map = map;
        layerList.setSelectedIndex(layerList.getFirstVisibleIndex());
        this.writeGUI();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLayerButton;
    private javax.swing.ButtonGroup blendingButtonGroup;
    private javax.swing.JPanel centralPanel;
    private javax.swing.JButton curveFileButton;
    private javax.swing.JTextField curveFilePathTextField;
    private javax.swing.JFormattedTextField eastField;
    private javax.swing.JPanel eastPanel;
    private javax.swing.JFormattedTextField embossAzimuthFormattedTextField;
    private javax.swing.JSlider embossAzimuthSlider;
    private javax.swing.JCheckBox embossCheckBox;
    private javax.swing.JFormattedTextField embossElevationFormattedTextField;
    private javax.swing.JSlider embossElevationSlider;
    private javax.swing.JFormattedTextField embossHeightFormattedTextField;
    private javax.swing.JSlider embossHeightSlider;
    private javax.swing.JFormattedTextField embossSoftnessFormattedTextField;
    private javax.swing.JSlider embossSoftnessSlider;
    private javax.swing.JButton extentButton;
    private javax.swing.JPanel extentPanel;
    private javax.swing.JCheckBox invertMaskCheckBox;
    private javax.swing.JFormattedTextField jFormattedTextField3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private edu.oregonstate.carto.mapcomposer.gui.DraggableList layerList;
    private javax.swing.JToolBar layerListToolBar;
    private javax.swing.JPanel layersPanel;
    private javax.swing.JSlider maskBlurSlider;
    private javax.swing.JComboBox maskComboBox;
    private javax.swing.JSpinner maxZoomSpinner;
    private javax.swing.JSpinner minZoomSpinner;
    private javax.swing.JButton moveDownLayerButton;
    private javax.swing.JButton moveUpLayerButton;
    private javax.swing.JRadioButton multiplyBlendingRadioButton;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JRadioButton normalBlendingRadioButton;
    private javax.swing.JFormattedTextField northField;
    private javax.swing.JSlider opacitySlider;
    private javax.swing.JFormattedTextField opacityTextField;
    private javax.swing.JButton previewButton;
    private javax.swing.JButton removeLayerButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JCheckBox shadowCheckBox;
    private edu.oregonstate.carto.mapcomposer.gui.ColorButton shadowColorButton;
    private javax.swing.JSlider shadowFuziSlider;
    private javax.swing.JLabel shadowOffsetLabel;
    private javax.swing.JSlider shadowOffsetSlider;
    private javax.swing.JFormattedTextField southField;
    private javax.swing.JPanel southPanel;
    private javax.swing.JButton textureClearButton;
    private javax.swing.JLabel texturePreviewLabel;
    private javax.swing.JFormattedTextField textureScaleFormattedTextField;
    private javax.swing.JSlider textureScaleSlider;
    private javax.swing.JButton textureSelectionButton;
    private javax.swing.JLabel textureURLLabel;
    private javax.swing.JCheckBox tintCheckBox;
    private edu.oregonstate.carto.mapcomposer.gui.ColorButton tintColorButton;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JCheckBox visibleCheckBox;
    private javax.swing.JFormattedTextField westField;
    // End of variables declaration//GEN-END:variables

}
